import XCTest
@testable import LocalizedKeyGenerator

final class LocalizedKeyGeneratorTests: XCTestCase {
    func testEverythingDefault() throws {
        let generator = LocalizedKeyGenerator(options: .empty)
        
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

enum LocalizedKey: String, CaseIterable {
  case what_is_this
  case who_are_you
  case why_use_this

  var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: .main,
                    comment: "")
  }
}
"""
        XCTAssertEqual(generated, expected)
    }
    
    func testOnlyEnumNameProvided() throws {
        let options = LocalizedKeyOptions(enumName: "AnEnum",
                                          isPublic: nil,
                                          fileName: nil,
                                          location: nil)
        
        let generator = LocalizedKeyGenerator(options: options)
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

enum AnEnum: String, CaseIterable {
  case what_is_this
  case who_are_you
  case why_use_this

  var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: .main,
                    comment: "")
  }
}
"""
        XCTAssertEqual(generated, expected)
    }
    
    func testOnlyPublicProvided() throws {
        let options = LocalizedKeyOptions(enumName: nil,
                                          isPublic: true,
                                          fileName: nil,
                                          location: nil)
        
        let generator = LocalizedKeyGenerator(options: options)
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

public enum LocalizedKey: String, CaseIterable {
  case what_is_this
  case who_are_you
  case why_use_this

  public var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: .main,
                    comment: "")
  }
}
"""
        XCTAssertEqual(generated, expected)
    }
    
    func testOnlyFileNameProvided() throws {
        let options = LocalizedKeyOptions(enumName: nil,
                                          isPublic: nil,
                                          fileName: "MoarStrings",
                                          location: nil)
        
        let generator = LocalizedKeyGenerator(options: options)
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

enum LocalizedKey: String, CaseIterable {
  case does_this_work
  case o_rly

  var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: .main,
                    comment: "")
  }
}
"""
        XCTAssertEqual(generated, expected)
    }
    
    func testOnlyLocationProvidedAsFramework() throws {
        let options = LocalizedKeyOptions(enumName: nil,
                                          isPublic: nil,
                                          fileName: nil,
                                          location: .frameworkBundle)
        
        let generator = LocalizedKeyGenerator(options: options)
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

enum LocalizedKey: String, CaseIterable {
  case what_is_this
  case who_are_you
  case why_use_this

  var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: Bundle(for: ClassForBundleLocation.self),
                    comment: "")
  }
}

private class ClassForBundleLocation {}
"""
        XCTAssertEqual(generated, expected)
    }
    
    func testCustomEnumNamePublicInModule() throws {
        let options = LocalizedKeyOptions(enumName: "TestKeys",
                                          isPublic: true,
                                          fileName: nil,
                                          location: .swiftModule)
        
        let generator = LocalizedKeyGenerator(options: options)
        
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

public enum TestKeys: String, CaseIterable {
  case what_is_this
  case who_are_you
  case why_use_this

  public var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: .module,
                    comment: "")
  }
}
"""
        XCTAssertEqual(generated, expected)
    }
    
    func testCustomFileNamePublicInModule() throws {
        
        let options = LocalizedKeyOptions(enumName: nil,
                                          isPublic: true,
                                          fileName: "MoarStrings",
                                          location: .swiftModule)
        
        let generator = LocalizedKeyGenerator(options: options)
        
        let generated = try generator.generateFileContents(from: .module)
        
        let expected = """
/// This file is automatically generated. Any changes will be overwritten.

public enum LocalizedKey: String, CaseIterable {
  case does_this_work
  case o_rly

  public var localizedValue: String {
    LocalizedString(key: self.rawValue,
                    bundle: .module,
                    comment: "")
  }
}
"""
        XCTAssertEqual(generated, expected)
    }
}
